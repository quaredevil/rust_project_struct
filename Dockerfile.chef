# syntax=docker/dockerfile:1.4

# ---- Dependency Cache Stage ----
FROM rust:latest AS chef

# Atualiza rustup e instala a versão mais recente
RUN rustup update stable && rustup default stable && cargo install cargo-chef

WORKDIR /app

# ---- Planner Stage ----
FROM chef AS planner
COPY Cargo.toml Cargo.lock ./
COPY src ./src
RUN cargo chef prepare --recipe-path recipe.json

# ---- Build Stage ----
FROM chef AS builder

ARG APP_VERSION=dev
ENV APP_VERSION=${APP_VERSION} \
    CARGO_TERM_COLOR=always \
    CARGO_INCREMENTAL=0 \
    CARGO_NET_RETRY=10 \
    RUSTUP_MAX_RETRIES=10

# Instala dependências de sistema necessárias para compilar crates
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    pkg-config \
    libssl-dev \
    libpq-dev \
    cmake \
    build-essential \
    libsasl2-dev \
    libzstd-dev

# Copia e compila dependências (cached)
COPY --from=planner /app/recipe.json recipe.json
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/local/cargo/git \
    --mount=type=cache,target=/app/target \
    cargo chef cook --release --recipe-path recipe.json

# Copia código fonte e compila
COPY Cargo.toml Cargo.lock ./
COPY src ./src
COPY migrations ./migrations

# Build em release mode (já vem otimizado por padrão)
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/local/cargo/git \
    --mount=type=cache,target=/app/target \
    cargo build --release --bin listener --locked && \
    cp /app/target/release/listener /listener && \
    strip /listener && \
    ls -lh /listener

# ---- Runtime Stage ----
FROM debian:trixie-slim AS runtime

ARG APP_VERSION=dev

WORKDIR /app

# Pacotes mínimos de runtime
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    libssl3 \
    libpq5 \
    libsasl2-2 \
    libzstd1 \
    curl \
  && update-ca-certificates

# Cria usuário não-root
RUN groupadd -r appuser -g 1000 \
  && useradd -u 1000 -r -g appuser -m -d /app -s /sbin/nologin appuser

# Copia binário do builder
COPY --from=builder --chown=appuser:appuser /listener /usr/local/bin/listener

# Copia migrations e entrypoint
COPY --chown=appuser:appuser migrations ./migrations
COPY --chown=appuser:appuser scripts/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Variáveis de ambiente
ENV APP_PORT=8080 \
    RUST_LOG=info,listener=debug \
    RUST_BACKTRACE=1 \
    APP_VERSION=${APP_VERSION}

EXPOSE 8080

# Metadados OCI
LABEL org.opencontainers.image.title="crypto-listener" \
      org.opencontainers.image.version="${APP_VERSION}" \
      org.opencontainers.image.description="Cryptocurrency market data listener" \
      org.opencontainers.image.licenses="MIT"

# Healthcheck
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -fsS http://localhost:${APP_PORT}/health || exit 1

USER appuser

ENTRYPOINT ["/entrypoint.sh"]
CMD ["listener"]
