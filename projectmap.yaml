---
project:
  name: project-struct-base
  language: Rust
  edition: "2021"
  architecture_style: "Hexagonal (Ports & Adapters)"
  description: |
    Generic Rust project template with hexagonal architecture.
    Provides base infrastructure for Kafka producers/consumers, PostgreSQL repositories,
    and clean architecture patterns. Ready to be customized for specific domains.

  features:
    default: []
    optional: []

  runtime: "Tokio async (full features)"
  web_framework: "Axum 0.8.6 (optional)"
  database: "PostgreSQL with SQLx"
  messaging: "Kafka (rdkafka)"
  observability: "tracing + tracing-subscriber (structured JSON logs)"

  documentation:
    location: "docs/"
    conventions:
      - "All technical documentation files must be placed in the docs/ folder"
      - "Use descriptive uppercase names with underscores (e.g., FEATURE_GUIDE.md)"
      - "Each significant feature, migration, or architectural decision should have its own .md file"
      - "Include date and version information in documentation when relevant"
      - "Migration guides should follow pattern: {FEATURE}_MIGRATION.md"
      - "Architecture decision records should follow pattern: ADR_{NUMBER}_{TITLE}.md"
      - "How-to guides should follow pattern: HOWTO_{TOPIC}.md"

naming_style: snake_case

application:
  description: |
    Application layer orchestrates use cases, defines port contracts (traits),
    and provides DTOs for cross-layer communication. This layer is pure business
    logic coordination without infrastructure knowledge.

  naming_style: snake_case

  modules:
    - name: ports
      path: src/application/ports
      purpose: "Port trait definitions (hexagonal architecture contracts)"

      key_files:
        - event_store.rs: "Generic event store interface"
        - projection_store.rs: "Generic projection store interface"

    - name: dtos
      path: src/application/dtos
      purpose: "Data Transfer Objects for API contracts and layer boundaries"
      note: "Add your domain-specific DTOs here"

    - name: services
      path: src/application/services
      purpose: "Application service orchestrators for use cases"

    - name: queries
      path: src/application/queries
      purpose: "Query handlers for read operations (CQRS pattern)"

  conventions:
    - "All ports are async traits with Send + Sync bounds"
    - "Port methods return InfraResult<T> for infrastructure errors"
    - "DTOs use serde Serialize/Deserialize for JSON compatibility"

domain:
  description: |
    Domain layer contains pure business logic, aggregates, entities, value objects,
    and domain events. No infrastructure dependencies.

  naming_style: snake_case

  modules:
    - name: aggregates
      path: src/domain/aggregates
      purpose: "Domain aggregates (aggregate roots)"

    - name: entities
      path: src/domain/entities
      purpose: "Domain entities"

    - name: events
      path: src/domain/events
      purpose: "Domain events"

    - name: value_objects
      path: src/domain/value_objects
      purpose: "Immutable value objects"

    - name: repositories
      path: src/domain/repositories
      purpose: "Repository interface definitions"

    - name: errors
      path: src/domain/errors.rs
      purpose: "Domain-level error types"

  conventions:
    - "Domain layer has zero infrastructure dependencies"
    - "Use thiserror for domain error definitions"

infrastructure:
  description: |
    Infrastructure layer implements adapters for external systems (Kafka, PostgreSQL, HTTP).
    Contains all I/O and framework-specific code. Provides bootstrap, startup, and shutdown
    modules for application lifecycle management.

  naming_style: snake_case

  modules:
    - name: bootstrap
      path: src/infrastructure/bootstrap
      purpose: "Component initialization with retry logic and fallbacks"
      
      key_files:
        - database.rs: "PostgreSQL connection bootstrapping with retry"

    - name: startup
      path: src/infrastructure/startup
      purpose: "Application startup configuration and logging"
      
      key_files:
        - logging.rs: "Structured logging initialization"
        - banner.rs: "Startup banner with health status"
        - health.rs: "Health check aggregation"

    - name: shutdown
      path: src/infrastructure/shutdown
      purpose: "Graceful shutdown coordination"
      
      key_files:
        - signal_handler.rs: "OS signal handling (SIGTERM, SIGINT)"
        - graceful.rs: "Sequential shutdown with timeouts"

    - name: messaging
      path: src/infrastructure/messaging
      purpose: "Kafka infrastructure"
      
      subdirectories:
        - kafka/producers/: "Generic Kafka producers"
        - kafka/consumers/: "Generic Kafka consumers"
        - kafka/common.rs: "Serialization and common types"
        - kafka/config.rs: "Kafka configuration"

    - name: repositories
      path: src/infrastructure/repositories
      purpose: "Repository implementations"
      
      key_files:
        - base_repository.rs: "Generic repository trait and PostgreSQL base"

    - name: config
      path: src/infrastructure/config
      purpose: "Configuration management"
      
      key_files:
        - settings.rs: "Application settings with environment support"

    - name: event_store
      path: src/infrastructure/event_store
      purpose: "Event store implementations"
      
      key_files:
        - in_memory_event_store.rs: "In-memory event store for testing"

  conventions:
    - "All infrastructure types implement application ports (traits)"
    - "Use Arc<Self> for shared ownership across async tasks"
    - "Graceful shutdown hooks via shutdown() method on ports"
    - "Health checks return InfraResult for readiness probes"
    - "Generic Kafka producers/consumers use type parameters for message types"
    - "Pluggable serialization via MessageSerializer/MessageDeserializer traits"
    - "Bootstrap modules handle all initialization with retry logic"
    - "Startup modules provide observability and user feedback"
    - "Shutdown modules ensure graceful resource cleanup"

  patterns:
    - pattern: Adapter Pattern
      usage: "Infrastructure types adapt external systems to port interfaces"

    - pattern: Decorator Pattern
      usage: "Batching decorator adds buffering logic for high-throughput scenarios"

    - pattern: Generic Programming
      usage: "Type-safe Kafka producers/consumers for any message type"

    - pattern: Builder Pattern
      usage: "Fluent component initialization in bootstrap modules"

shared:
  description: |
    Shared layer contains common utilities, traits, types, and error definitions
    used across all layers.

  modules:
    - errors.rs: "Common error types (InfraError, DomainError)"
    - types.rs: "Common type aliases"
    - traits/: "Common trait definitions"
    - utils/: "Utility functions"

  conventions:
    - "Keep shared layer minimal"
    - "Only truly cross-cutting concerns belong here"

best_practices:
  - category: architecture
    note: "Bootstrap, startup, and shutdown modules follow single responsibility principle"
    priority: high

  - category: configuration
    note: "Multiple Kafka topics/producers/consumers supported via Settings HashMap"
    priority: high

  - category: naming
    note: "Follow consistent naming pattern for Kafka topics (e.g., {app-name}-{topic-name})"
    priority: medium

quality:
  test_coverage: unknown
  cyclomatic_complexity: medium
  coupling: moderate
  cohesion: high
